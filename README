Scenario
Background:

We are working with a hypothetical parcel delivery company called MemEx, whose workload is driven by up to 7 scans on each of the 50 million parcels they are tracking daily. Each such scan has a unique, numeric SCAN_ID value. They need to track every scan individually because scans report parcel location and doing so helps them optimize resource planning: they can reduce costs by better understanding how many parcels are going through their routing centers in real tim
In addition, each parcel is given a unique, alphanumeric SCAN_HASH value, representing a consistent hash of the metadata associated with the postage stamp on that parcel. Using SCAN_HASH, MemEx wants to check all instances where a parcel has been scanned, as well as track the scan history for that parcel.

So SCAN_ID values are unique across scans, whereas SCAN_HASH values are unique across parcels, but may be repeated up to 7 times across scans.

The current production schema for the database table tracking scans is as follows:

CREATE TABLE SCANS
(
    SCAN_ID                BIGINT NOT NULL,
    SCAN_HASH              VARCHAR(11) NOT NULL,
    SCAN_TYPE              VARCHAR(3),
    SCAN_COUNT             INT,
    MACHINE_TYPE           VARCHAR(10),
    SEQUENCE_CODE          VARCHAR(5),
    LOAD_DATE              TIMESTAMP,
    PRIMARY KEY (SCAN_ID)
)

Accordingly, a sample "read" query that, given a particular parcel, returns instances where that parcel has been scanned could be:

SELECT * FROM SCANS WHERE SCAN_HASH = ?


Objectives:

Demonstrate that MemSQL can support high-throughput, concurrent, mixed read/write workloads.
Generate a sample data set for Memex consistent with the schema information given above.
Provide a benchmark each for read-only, write-only and mixed read/write workloads, including a transactions-per-second metric for each workload (i.e. number of INSERTs per second and/or number of SELECTs per second - for the purposes of this exercise we will assume each "write" transaction consists of a single record being inserted).

Investigate how much data we can actually store in the MemSQL cluster.

Investigate how using a shard key can speed up the performance of the "read" workload.

Measure the performance of querying records based on SCAN_ID vs SCAN_HASH. Can we make both sets of queries fast? If so, how?

[BONUS] Investigate data ingest using LOAD DATA INFILE vs INSERT statements. What are the trade-offs between the two approaches?


Deliverables:

We will be assessing you on your analytical approach to the problem, the quality of the code you produce, the comprehensiveness and clarity of how you present your results, and, to a lesser extent, the sheer performance you are able to obtain from the cluster. 
To that end, we ask that you submit, at the very least:

The code for generating sample data.

The code that executes the benchmarks and computes the metrics for each workload.

A document summarizing your investigation and your findings. This can be in the form of a short write-up, a slideshow, or some other easily consumable document, and should be customer-facing.
